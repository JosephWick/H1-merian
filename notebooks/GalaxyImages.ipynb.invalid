{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5989de3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pynbody\n",
    "import pynbody.plot.sph as sph\n",
    "import matplotlib.pylab as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "94d69922",
   "metadata": {},
   "outputs": [],
   "source": [
    "def getfilepath(h):\n",
    "    '''\n",
    "    gets file path for data of halo h in [CDM, SIDM] order \n",
    "    '''\n",
    "    \n",
    "    cdm = '/data/REPOSITORY/e11Gals/romulus_dwarf_zooms/r'+str(h)+'.romulus25.3072g1HsbBH/r'+str(h)\n",
    "    cdm += '.romulus25.3072g1HsbBH.004096'\n",
    "    \n",
    "    sidm = '/data/REPOSITORY/e11Gals/romulus_dwarf_zooms/r'+str(h)+'.romulus25cvdXsec.3072g1HsbBH/r'+str(h)\n",
    "    sidm +='.romulus25cvdXsec.3072g1HsbBH.004096'\n",
    "    \n",
    "    return [cdm,sidm]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a3f5d666",
   "metadata": {},
   "outputs": [],
   "source": [
    "haloIDs = [431, 468, 492, 502, 523, 569]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "982e3786",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = pynbody.load(f)\n",
    "s.physical_units()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c988656",
   "metadata": {},
   "outputs": [],
   "source": [
    "h = s.halos()\n",
    "\n",
    "# center on the largest halo and align the disk\n",
    "pynbody.analysis.angmom.faceon(h[1])\n",
    "\n",
    "#create a simple slice of gas density\n",
    "sph.image(h[1].s,width='10 kpc',cmap=\"Blues\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7559ec37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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